% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/join.r
\name{mutate-joins}
\alias{mutate-joins}
\alias{join}
\alias{inner_join}
\alias{left_join}
\alias{right_join}
\alias{full_join}
\title{Mutating joins}
\usage{
inner_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)

left_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)

right_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)

full_join(
  x,
  y,
  by = NULL,
  copy = FALSE,
  suffix = c(".x", ".y"),
  ...,
  keep = FALSE
)
}
\arguments{
\item{x, y}{Data frames}

\item{by}{A character vector of variables to join by.

If \code{NULL}, the default, \verb{*_join()} will perofrm a natural join, using all
variables in across \code{x} and \code{y}. A message lists the variables so that you
can check they're correct; suppress the message by supply \code{by} explicitly.

To join by different variables on \code{x} and \code{y} use a named vector.
For example, \code{by = c("a" = "b")} will match \code{x$a} to \code{y$b}.

To perform a cross-join, generating all combinations of \code{x} and \code{y},
use \code{by = character()}.}

\item{copy}{If \code{x} and \code{y} are not from the same data source,
and \code{copy} is \code{TRUE}, then \code{y} will be copied into the
same src as \code{x}.  This allows you to join tables across srcs, but
it is a potentially expensive operation so you must opt into it.}

\item{suffix}{If there are non-joined duplicate variables in \code{x} and
\code{y}, these suffixes will be added to the output to disambiguate them.
Should be a character vector of length 2.}

\item{...}{Other parameters passed onto methods.

For example, \code{na_matches} controls how \code{NA} values are handled when
joining data frames. See \link{join.data.frame} for details.}

\item{keep}{Should the join keys from \code{y} be preserved in the output?
Only applies to \code{nest_join()} and \code{full_join()}.}
}
\value{
An object of the same type as \code{x}. The order of the rows and columns of \code{x}
is preserved as much as possible.
\itemize{
\item For \code{inner_join()}, a subset of the \code{x} rows.
For \code{left_join()}, all \code{x} rows.
For \code{right_join()}, a subset of \code{x} rows, followed by unmatched \code{y} rows.
For \code{full_join()}, all \code{x} rows, followed by unmatched \code{y} rows.
\item For all joins, rows will be duplicated if one row in \code{x} rows match
multiple rows in \code{y}.
\item Output columns include all \code{x} columns and all \code{y} columns. If the
columns have the same name (and aren't included \code{y}), \code{suffix}es are
added to disambiguate.
\item Output columns columns included \code{by} are coerced to common type across
\code{x} and \code{y}.
\item Groups are taken from \code{x}.
}
}
\description{
The mutating joins add columns from \code{y} to \code{x}, matching rows based on the
keys:
\itemize{
\item \code{inner_join()}: includes all rows in \code{x} and \code{y}.
\item \code{left_join()}: includes all rows in \code{x}.
\item \code{right_join()}: includes all rows in \code{y}.
\item \code{full_join()}: includes all rows in \code{x} or \code{y}.
}

If there are multiple matches between \code{x} and \code{y}, all combination of the
matches are returned.
}
\examples{
band_members \%>\% inner_join(band_instruments)
band_members \%>\% left_join(band_instruments)
band_members \%>\% right_join(band_instruments)
band_members \%>\% full_join(band_instruments)

# To suppress the message about joining variables, supply `by`
band_members \%>\% inner_join(band_instruments, by = "name")
# This is good practice in production code

# Use a named `by` if the join variables have different names
band_members \%>\% full_join(band_instruments2, by = c("name" = "artist"))
# By default only the join keys from `x` are kept; use `keep = TRUE`
# to keep both
band_members \%>\%
  full_join(band_instruments2, by = c("name" = "artist"), keep = TRUE)

# Note that if a row in `x` matches multiple rows in `y`, all rows
# will be returned
df1 <- tibble(x = 1:3)
df2 <- tibble(x = c(1, 1, 2), y = c("first", "second", "third"))
df1 \%>\% left_join(df2)
}
\seealso{
Other joins: 
\code{\link{filter-joins}},
\code{\link{nest_join}()}
}
\concept{joins}
